{{- if .Values.helloWorld.deploy -}}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: hello-world
  # You'll usually want to add your resources to the argocd namespace.
  namespace: argocd
  # Add this finalizer ONLY if you want these to cascade delete.
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  # Add labels to your application object.
  labels:
    name: hello-world
  annotations:
    # https://argocd-image-updater.readthedocs.io/en/stable/configuration/applications/
    # !!!IMPORTANT!!!: 
    # -  update the repository to match your Repo docker.io/kameshsampath/ go-hello-world:latest could be replaced with image pointing to the image you want to set typically to your image repository e.g. quay.io/foo/bar
    #  - ensure the alias hwimage is used in all annotations to replace the right image
    argocd-image-updater.argoproj.io/image-list: hwimage={{ .Values.helloWorld.image.repo }}
    # the orignal image name in https://github.com/kameshsampath/go-hello-world/blob/main/config/deployment.yaml#L17. No need to change this.
    argocd-image-updater.argoproj.io/hwimage.kustomize.image-name: ghcr.io/kameshsampath/go-hello-world
    # use semantic versioning for new image updates. https://semver.org/
    argocd-image-updater.argoproj.io/hwimage.update-strategy: digest
    # froce update deployment where the image is not updated your image repo
    argocd-image-updater.argoproj.io/hwimage.force-update: "true"
spec:
  # The project the application belongs to.
  project: hello-worlds

  # Source of the application manifests
  source:
    repoURL: {{.Values.source.repoURL}}
    targetRevision: main
    path: apps/go-helloworld
    # kustomize specific config
    kustomize: {}

  # Destination cluster and namespace to deploy the application
  destination:
    server: https://kubernetes.default.svc
    # The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
    namespace: demo-apps

  # Sync policy
  syncPolicy:
    automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
    syncOptions:     # Sync options which modifies sync behavior
    - Validate=false # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
    - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
    - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation
    # The retry feature is available since v1.7
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 3m # the maximum amount of time allowed for the backoff strategy

  # Will ignore differences between live and desired states during the diff. Note that these configurations are not
  # used during the sync process.
  ignoreDifferences:
  # for the specified json pointers
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
  # for the specified managedFields managers
  - group: "*"
    kind: "*"
    managedFieldsManagers:
    - kube-controller-manager

  # RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for
  # informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional
  # circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the
  # space used to store the history, so we do not recommend increasing it.
  revisionHistoryLimit: 10
{{- end }}